#!/usr/bin/env bash

# format_resources_r build-main
# 
# This wrapper script is auto-generated by viash 0.8.6 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  SOURCE="$1"
  while [[ "$SOURCE" != "" && ! -e "$SOURCE/.build.yaml" ]]; do
    SOURCE=${SOURCE%/*}
  done
  echo $SOURCE
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="format_resources_r"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "format_resources_r build-main"
  echo ""
  echo "Arguments:"
  echo "    --rna_matrix"
  echo "        type: file, required parameter, file must exist"
  echo "        example: output/scRNA/X_matrix.mtx"
  echo ""
  echo "    --atac_matrix"
  echo "        type: file, required parameter, file must exist"
  echo "        example: output/scATAC/X_matrix.mtx"
  echo ""
  echo "    --rna_gene_annot"
  echo "        type: file, required parameter, file must exist"
  echo "        example: output/scRNA/annotation_gene.csv"
  echo ""
  echo "    --rna_cell_annot"
  echo "        type: file, required parameter, file must exist"
  echo "        example: output/scRNA/annotation_cell.csv"
  echo ""
  echo "    --atac_peak_annot"
  echo "        type: file, required parameter, file must exist"
  echo "        example: output/scATAC/annotation_gene.csv"
  echo ""
  echo "    --atac_cell_annot"
  echo "        type: file, required parameter, file must exist"
  echo "        example: output/scATAC/annotation_cell.csv"
  echo ""
  echo "    --rna_rds"
  echo "        type: file, output, file must exist"
  echo "        example: resources/grn-benchmark/multiomics_r/rna.rds"
  echo ""
  echo "    --atac_rds"
  echo "        type: file, output, file must exist"
  echo "        example: resources/grn-benchmark/multiomics_r/atac.rds"
}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "format_resources_r build-main"
            exit
            ;;
        --rna_matrix)
            [ -n "$VIASH_PAR_RNA_MATRIX" ] && ViashError Bad arguments for option \'--rna_matrix\': \'$VIASH_PAR_RNA_MATRIX\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_RNA_MATRIX="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --rna_matrix. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --rna_matrix=*)
            [ -n "$VIASH_PAR_RNA_MATRIX" ] && ViashError Bad arguments for option \'--rna_matrix=*\': \'$VIASH_PAR_RNA_MATRIX\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_RNA_MATRIX=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --atac_matrix)
            [ -n "$VIASH_PAR_ATAC_MATRIX" ] && ViashError Bad arguments for option \'--atac_matrix\': \'$VIASH_PAR_ATAC_MATRIX\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ATAC_MATRIX="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --atac_matrix. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --atac_matrix=*)
            [ -n "$VIASH_PAR_ATAC_MATRIX" ] && ViashError Bad arguments for option \'--atac_matrix=*\': \'$VIASH_PAR_ATAC_MATRIX\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ATAC_MATRIX=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --rna_gene_annot)
            [ -n "$VIASH_PAR_RNA_GENE_ANNOT" ] && ViashError Bad arguments for option \'--rna_gene_annot\': \'$VIASH_PAR_RNA_GENE_ANNOT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_RNA_GENE_ANNOT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --rna_gene_annot. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --rna_gene_annot=*)
            [ -n "$VIASH_PAR_RNA_GENE_ANNOT" ] && ViashError Bad arguments for option \'--rna_gene_annot=*\': \'$VIASH_PAR_RNA_GENE_ANNOT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_RNA_GENE_ANNOT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --rna_cell_annot)
            [ -n "$VIASH_PAR_RNA_CELL_ANNOT" ] && ViashError Bad arguments for option \'--rna_cell_annot\': \'$VIASH_PAR_RNA_CELL_ANNOT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_RNA_CELL_ANNOT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --rna_cell_annot. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --rna_cell_annot=*)
            [ -n "$VIASH_PAR_RNA_CELL_ANNOT" ] && ViashError Bad arguments for option \'--rna_cell_annot=*\': \'$VIASH_PAR_RNA_CELL_ANNOT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_RNA_CELL_ANNOT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --atac_peak_annot)
            [ -n "$VIASH_PAR_ATAC_PEAK_ANNOT" ] && ViashError Bad arguments for option \'--atac_peak_annot\': \'$VIASH_PAR_ATAC_PEAK_ANNOT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ATAC_PEAK_ANNOT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --atac_peak_annot. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --atac_peak_annot=*)
            [ -n "$VIASH_PAR_ATAC_PEAK_ANNOT" ] && ViashError Bad arguments for option \'--atac_peak_annot=*\': \'$VIASH_PAR_ATAC_PEAK_ANNOT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ATAC_PEAK_ANNOT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --atac_cell_annot)
            [ -n "$VIASH_PAR_ATAC_CELL_ANNOT" ] && ViashError Bad arguments for option \'--atac_cell_annot\': \'$VIASH_PAR_ATAC_CELL_ANNOT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ATAC_CELL_ANNOT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --atac_cell_annot. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --atac_cell_annot=*)
            [ -n "$VIASH_PAR_ATAC_CELL_ANNOT" ] && ViashError Bad arguments for option \'--atac_cell_annot=*\': \'$VIASH_PAR_ATAC_CELL_ANNOT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ATAC_CELL_ANNOT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --rna_rds)
            [ -n "$VIASH_PAR_RNA_RDS" ] && ViashError Bad arguments for option \'--rna_rds\': \'$VIASH_PAR_RNA_RDS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_RNA_RDS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --rna_rds. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --rna_rds=*)
            [ -n "$VIASH_PAR_RNA_RDS" ] && ViashError Bad arguments for option \'--rna_rds=*\': \'$VIASH_PAR_RNA_RDS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_RNA_RDS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --atac_rds)
            [ -n "$VIASH_PAR_ATAC_RDS" ] && ViashError Bad arguments for option \'--atac_rds\': \'$VIASH_PAR_ATAC_RDS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ATAC_RDS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --atac_rds. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --atac_rds=*)
            [ -n "$VIASH_PAR_ATAC_RDS" ] && ViashError Bad arguments for option \'--atac_rds=*\': \'$VIASH_PAR_ATAC_RDS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ATAC_RDS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_PAR_RNA_MATRIX+x} ]; then
  ViashError '--rna_matrix' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_ATAC_MATRIX+x} ]; then
  ViashError '--atac_matrix' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_RNA_GENE_ANNOT+x} ]; then
  ViashError '--rna_gene_annot' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_RNA_CELL_ANNOT+x} ]; then
  ViashError '--rna_cell_annot' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_ATAC_PEAK_ANNOT+x} ]; then
  ViashError '--atac_peak_annot' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_ATAC_CELL_ANNOT+x} ]; then
  ViashError '--atac_cell_annot' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_RNA_MATRIX" ] && [ ! -e "$VIASH_PAR_RNA_MATRIX" ]; then
  ViashError "Input file '$VIASH_PAR_RNA_MATRIX' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_ATAC_MATRIX" ] && [ ! -e "$VIASH_PAR_ATAC_MATRIX" ]; then
  ViashError "Input file '$VIASH_PAR_ATAC_MATRIX' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_RNA_GENE_ANNOT" ] && [ ! -e "$VIASH_PAR_RNA_GENE_ANNOT" ]; then
  ViashError "Input file '$VIASH_PAR_RNA_GENE_ANNOT' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_RNA_CELL_ANNOT" ] && [ ! -e "$VIASH_PAR_RNA_CELL_ANNOT" ]; then
  ViashError "Input file '$VIASH_PAR_RNA_CELL_ANNOT' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_ATAC_PEAK_ANNOT" ] && [ ! -e "$VIASH_PAR_ATAC_PEAK_ANNOT" ]; then
  ViashError "Input file '$VIASH_PAR_ATAC_PEAK_ANNOT' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_ATAC_CELL_ANNOT" ] && [ ! -e "$VIASH_PAR_ATAC_CELL_ANNOT" ]; then
  ViashError "Input file '$VIASH_PAR_ATAC_CELL_ANNOT' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_RNA_RDS" ] && [ ! -d "$(dirname "$VIASH_PAR_RNA_RDS")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_RNA_RDS")"
fi
if [ ! -z "$VIASH_PAR_ATAC_RDS" ] && [ ! -d "$(dirname "$VIASH_PAR_ATAC_RDS")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_ATAC_RDS")"
fi


# set dependency paths


ViashDebug "Running command: bash"
cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-format_resources_r-XXXXXX").R
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
library(dplyr)
library(FNN)
library(chromVAR)
library(doParallel)
library(FigR)

## VIASH START
# The following code has been auto-generated by Viash.
# treat warnings as errors
.viash_orig_warn <- options(warn = 2)

par <- list(
  "rna_matrix" = $( if [ ! -z ${VIASH_PAR_RNA_MATRIX+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_RNA_MATRIX" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "atac_matrix" = $( if [ ! -z ${VIASH_PAR_ATAC_MATRIX+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_ATAC_MATRIX" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "rna_gene_annot" = $( if [ ! -z ${VIASH_PAR_RNA_GENE_ANNOT+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_RNA_GENE_ANNOT" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "rna_cell_annot" = $( if [ ! -z ${VIASH_PAR_RNA_CELL_ANNOT+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_RNA_CELL_ANNOT" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "atac_peak_annot" = $( if [ ! -z ${VIASH_PAR_ATAC_PEAK_ANNOT+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_ATAC_PEAK_ANNOT" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "atac_cell_annot" = $( if [ ! -z ${VIASH_PAR_ATAC_CELL_ANNOT+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_ATAC_CELL_ANNOT" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "rna_rds" = $( if [ ! -z ${VIASH_PAR_RNA_RDS+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_RNA_RDS" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "atac_rds" = $( if [ ! -z ${VIASH_PAR_ATAC_RDS+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_ATAC_RDS" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi )
)
meta <- list(
  "functionality_name" = $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo -n "'"; echo -n "$VIASH_META_FUNCTIONALITY_NAME" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "resources_dir" = $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo -n "'"; echo -n "$VIASH_META_RESOURCES_DIR" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "executable" = $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo -n "'"; echo -n "$VIASH_META_EXECUTABLE" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "config" = $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo -n "'"; echo -n "$VIASH_META_CONFIG" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "temp_dir" = $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo -n "'"; echo -n "$VIASH_META_TEMP_DIR" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "cpus" = $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_META_CPUS" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_b" = $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_B" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_kb" = $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_KB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_mb" = $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_MB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_gb" = $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_GB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_tb" = $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_TB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_pb" = $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_PB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi )
)
dep <- list(
  
)


# restore original warn setting
options(.viash_orig_warn)
rm(.viash_orig_warn)

## VIASH END


## Load atac-seq and create summarizedexperiment
X <- readMM(par\$atac_matrix)
X <- t(X)
annotation_peak <- read.csv(par\$atac_peak_annot, row.names = 1)
annotation_cells <- read.csv(par\$atac_cell_annot, row.names = 1)

# Filter out entries where seqname is 'chr10'
filter_indices <- grepl("^chr", annotation_peak\$seqname)
annotation_peak_filtered <- annotation_peak[filter_indices, ]

# Filter the rows in X
X_filtered <- X[filter_indices, ]


# Create the SummarizedExperiment object with the filtered data
atac <- SummarizedExperiment(assays = list(counts = X_filtered), 
                             rowRanges = GRanges(annotation_peak_filtered\$seqname,
                             IRanges(annotation_peak_filtered\$ranges)), 
                             colData = DataFrame(annotation_cells))

colnames(atac) <- annotation_cells\$obs_id    
rownames(atac) <- paste(as.character(seqnames(atac)), as.character(ranges(atac)), sep=':')   

print(dim(atac)) #peaks*cells

saveRDS(atac, par\$atac_rds)



### Load RNA-seq and create sparsematrix
XX <- readMM(par\$rna_matrix)
XX <- t(XX)
annotation_gene <- read.csv(par\$rna_gene_annot, row.names = 1)
annotation_cells <- read.csv(par\$rna_cell_annot, row.names = 1)

rna <- as(XX, "CsparseMatrix")
rownames(rna) <- annotation_gene\$location
colnames(rna) <- annotation_cells\$obs_id

# Remove genes with zero expression across all cells
rna <- rna[Matrix::rowSums(rna)!=0,]

print(dim(rna)) # genes*cells

saveRDS(rna, par\$rna_rds)
VIASHMAIN
Rscript "\$tempscript" &
wait "\$!"

VIASHEOF


# check whether required files exist
if [ ! -z "$VIASH_PAR_RNA_RDS" ] && [ ! -e "$VIASH_PAR_RNA_RDS" ]; then
  ViashError "Output file '$VIASH_PAR_RNA_RDS' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_ATAC_RDS" ] && [ ! -e "$VIASH_PAR_ATAC_RDS" ]; then
  ViashError "Output file '$VIASH_PAR_ATAC_RDS' does not exist."
  exit 1
fi


exit 0
